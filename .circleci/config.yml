build_jobs: &build_jobs
  jobs:
    - build-amd64
    - build-arm64
    - build-armhf
    - push-manifest:
        requires:
          - build-amd64
          - build-arm64
          - build-armhf

workflows:
  version: 2
  commit:
    <<: *build_jobs
  # nightly:
  #   <<: *build_jobs
  #   triggers:
  #     - schedule:
  #         cron: "0 0 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master

shared: &shared
  docker:
    - image: docker:stable-git
  steps:
    - checkout

    - setup_remote_docker:
        docker_layer_caching: true

    - run:
        name: Install build dependencies.
        command: apk add --no-cache bash curl git jq

    - run:
        name: Add dynamic shared vars to env.
        command: |
          .circleci/load_env.sh

    # - run:
    #     name: Build and push Docker image.
    #     command: |
    #       source $BASH_ENV
    #       .circleci/build-image.sh

    - run:
        name: Build Docker image.
        command: |
          source $BASH_ENV
          ./build.sh "$VERSION" "$TAG"

    - run:
        name: Build Docker image.
        command: |
          source $BASH_ENV
          docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
          docker push "$IMAGE_ID"

    # - run:
    #     name: Push Docker image.
    #     command: |
    #       source $BASH_ENV
    #       docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
    #       ./push_to_docker_hub.sh "$GRAFANA_VERSION"
    #       if echo "$GRAFANA_VERSION" | grep -q "^master-"; then
    #         apk add --no-cache curl
    #         ./deploy_to_k8s.sh "grafana/grafana-dev:$GRAFANA_VERSION"
    #       fi

jobs:
  build-amd64:
    <<: *shared
    environment:
      TAG: amd64
      TARGET: amd64
  build-arm64:
    <<: *shared
    environment:
      QEMU_ARCH: aarch64
      TAG: arm64
      TARGET: arm64v8
  build-armhf:
    <<: *shared
    environment:
      QEMU_ARCH: arm
      TAG: arm
      TARGET: arm32v7

  push-manifest:
    docker:
      - image: docker:stable
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Determine repo version.
          command: |
            apk add --no-cache bash curl git jq
            .circleci/load_env.sh

      - run:
          name: Install manifest-tool.
          command: |
            .circleci/install_manifest_tool.sh

      - run:
          name: Push Docker manifest.
          command: |
            source "$BASH_ENV"
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin;
            manifest-tool push from-args \
              --platforms linux/amd64,linux/arm,linux/arm64 \
              --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
              --target "$REGISTRY/$IMAGE:$VERSION"
            if [ "${CIRCLE_BRANCH}" == 'master' ]; then
              manifest-tool push from-args \
                --platforms linux/amd64,linux/arm,linux/arm64 \
                --template "$REGISTRY/$IMAGE:$VERSION-ARCH" \
                --target "$REGISTRY/$IMAGE:latest"
            fi

      - run:
          name: Verify manifest was persisted remotely.
          command: |
            source "$BASH_ENV"
            manifest-tool inspect "$REGISTRY/$IMAGE:$VERSION"

